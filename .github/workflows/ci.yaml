name: CI

on:
  push:
    branches:
      - 2021-11-axia
      
jobs:

  docker:
    env:
      branch: 2021-11-axia
      github_repo: dockercoins
      github_user: academiaonline-org
      tag: latest
    runs-on: ubuntu-18.04
    steps:
      - 
        name: checkout
        uses: actions/checkout@v2
      -
        name: build
        run: |
          for app in hasher redis rng worker
          do
          docker build -t ${app}:${tag} ${app}
          done
      -
        name: build-webui
        run: |
          app=webui
          docker pull academiaonline/dockercoins:2021-10-webui
          docker tag academiaonline/dockercoins:2021-10-webui ${app}:${tag}
      -
        name: networks
        run: |
          for app in hasher rng webui worker
          do 
          docker network create ${app}
          done
      -
        name: run-redis
        run: |
          cmd=redis-server
          entrypoint=/usr/local/bin/docker-entrypoint.sh
          image=redis
          name=redis
          network=webui
          restart=always
          user=redis
          volume=redis
          volume_path=/data/
          volume_ops=rw
          workdir=/data/
          docker run -d --entrypoint ${entrypoint} --name ${name} --network ${network} --read-only --restart ${restart} -u ${user} -v ${volume}:${volume_path}:${volume_ops} -w ${workdir} ${image}:${tag} ${cmd}
      -
        name: connect-redis
        run:  docker network connect worker redis
      -
        name: run-hasher
        run: |
          GEM_HOME=/usr/local/bundle
          BUNDLE_SILENCE_ROOT_WARNING=1
          BUNDLE_APP_CONFIG="$GEM_HOME"
          PATH=$GEM_HOME/bin:$PATH
          cmd=hasher.rb
          entrypoint=/usr/local/bin/ruby
          image=hasher
          name=hasher
          network=hasher
          restart=always
          user=nobody
          volume=${PWD}/hasher/hasher.rb
          volume_path=/hasher/hasher.rb
          volume_ops=ro
          workdir=/hasher/
          docker run -d -e GEM_HOME -e BUNDLE_SILENCE_ROOT_WARNING -e BUNDLE_APP_CONFIG -e PATH --entrypoint ${entrypoint} --name ${name} --network ${network} --read-only --restart ${restart} -u ${user} -v ${volume}:${volume_path}:${volume_ops} -w ${workdir} ${image}:${tag} ${cmd}
      -
        name: run-rng
        run: |
          cmd=rng.py
          entrypoint=/usr/local/bin/python
          image=rng
          name=rng
          network=rng
          restart=always
          user=nobody
          volume=${PWD}/rng/rng.py
          volume_path=/rng/rng.py
          volume_ops=ro
          volume_tmp_0=/usr/local/lib/python3.10/collections/__pycache__
          volume_tmp_1=/usr/local/lib/python3.10/encodings/__pycache__
          volume_tmp_2=/usr/local/lib/python3.10/importlib/__pycache__
          volume_tmp_3=/usr/local/lib/python3.10/__pycache__
          workdir=/rng/
          docker run -d --entrypoint ${entrypoint} --name ${name} --network ${network} --read-only --restart ${restart} -u ${user} -v ${volume}:${volume_path}:${volume_ops} -v ${volume_tmp_0} -v ${volume_tmp_1} -v ${volume_tmp_2} -v ${volume_tmp_3} -w ${workdir} ${image}:${tag} ${cmd}
      -
        name: run-worker
        run: |
          cmd=worker.py
          entrypoint=/usr/local/bin/python
          image=worker
          name=worker
          network=worker
          restart=always
          user=nobody
          volume=${PWD}/worker/worker.py
          volume_path=/worker/worker.py
          volume_ops=ro
          volume_tmp_0=/usr/local/lib/python3.10/collections/__pycache__
          volume_tmp_1=/usr/local/lib/python3.10/encodings/__pycache__
          volume_tmp_2=/usr/local/lib/python3.10/importlib/__pycache__
          volume_tmp_3=/usr/local/lib/python3.10/__pycache__
          workdir=/worker/
          docker run -d --entrypoint ${entrypoint} --name ${name} --network ${network} --read-only --restart ${restart} -u ${user} -v ${volume}:${volume_path}:${volume_ops} -v ${volume_tmp_0} -v ${volume_tmp_1} -v ${volume_tmp_2} -v ${volume_tmp_3} -w ${workdir} ${image}:${tag} ${cmd}
      -
        name: connect-worker
        run: |
          for network in hasher rng
          do
          docker network connect ${network} worker
          done 
      -
        name: run-webui
        run: |
          cmd=webui.js
          entrypoint=/usr/local/bin/node
          image=webui
          name=webui
          network=webui
          port_host=8080
          port_target=8080
          restart=always
          user=nobody
          volume=${PWD}/webui/webui.js
          volume_path=/webui/webui.js
          volume_files=${PWD}/webui/files/
          volume_files_path=/webui/files/
          volume_ops=ro
          workdir=/webui/
          docker run -d --entrypoint ${entrypoint} --name ${name} --network ${network} --publish ${port_host}:${port_target} --read-only --restart ${restart} -u ${user} -v ${volume}:${volume_path}:${volume_ops} -v ${volume_files}:${volume_files_path}:${volume_ops} -w ${workdir} ${image}:${tag} ${cmd}
      -
        name: test
        run: |
          while true
          do
          curl localhost:8080/index.html --silent | grep DockerCoin.Miner.WebUI && break
          sleep 10
          done
          
  swarm:
    env:
      branch: 2021-11-axia
      github_repo: dockercoins
      github_user: academiaonline-org
      tag: latest
    runs-on: ubuntu-18.04
    steps:
      - 
        name: checkout
        uses: actions/checkout@v2
      -
        name: build
        run: |
          for app in hasher redis rng worker
          do
          docker build -t ${app}:${tag} ${app}
          done
      -
        name: build-webui
        run: |
          app=webui
          docker pull academiaonline/dockercoins:2021-10-webui
          docker tag academiaonline/dockercoins:2021-10-webui ${app}:${tag}
      -
        name: swarm-init
        run: docker swarm init
      -
        name: stack-deploy
        run: docker stack deploy -c docker-compose.yaml dockercoins
      -
        name: test-webui
        run: |
          while true
          do
          docker service logs dockercoins_webui | grep WEBUI.running.on.port && break
          sleep 10
          done         
      -
        name: test-worker
        run: |
          while true
          do
          docker service logs dockercoins_worker | grep Coin.found && break
          sleep 10
          done
          
  kubernetes:
    env:
      branch: 2021-11-axia
      github_repo: dockercoins
      github_user: academiaonline-org
      tag: latest
    runs-on: ubuntu-18.04
    steps:
      - 
        name: checkout
        uses: actions/checkout@v2
      -
        name: build
        run: |
          for app in hasher redis rng worker
          do
          docker build -t ${app}:${tag} ${app}
          done
      -
        name: build-webui
        run: |
          app=webui
          docker pull academiaonline/dockercoins:2021-10-webui
          docker tag academiaonline/dockercoins:2021-10-webui ${app}:${tag}
      -
        name: kube-init
        run: |
          uuid=$( md5sum $compose | cut -d\  -f1 )                               ;
          git clone --single-branch -b v1.2                                      \
            https://github.com/academiaonline/kubernetes $uuid                   ;
          path=$uuid/bin/cluster/ubuntu18/install-docker-kubelet.sh              ;
          source $path                                                           ;
          path=$uuid/bin/cluster/ubuntu18/install-leader.sh                      ;
          source $path                                                           ;
          master=$( kubectl get node | grep master | awk '{ print $1 }' )        ;
          kubectl taint node $master node-role.kubernetes.io/master:NoSchedule-  ;
          rm -rf $uuid                                                           ;        
      -
        name: kube-deploy
        run: kubectl apply -f kube-compose.yaml 
      -
        name: test-webui
        run: |
          while true
          do
          kubectl logs service webui | grep WEBUI.running.on.port && break
          sleep 10
          done         
      -
        name: test-worker
        run: |
          while true
          do
          kubectl logs replicaset worker | grep Coin.found && break
          sleep 10
          done
          
